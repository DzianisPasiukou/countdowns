//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CountdownBusinessLogic.CountdownServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CountdownServiceReference.ICountdownService", CallbackContract=typeof(CountdownBusinessLogic.CountdownServiceReference.ICountdownServiceCallback))]
    public interface ICountdownService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountdownService/GetData", ReplyAction="http://tempuri.org/ICountdownService/GetDataResponse")]
        Transfer.SmallTransfer.ReminderPartDto[] GetData(string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICountdownService/GetData", ReplyAction="http://tempuri.org/ICountdownService/GetDataResponse")]
        System.IAsyncResult BeginGetData(string userName, System.AsyncCallback callback, object asyncState);
        
        Transfer.SmallTransfer.ReminderPartDto[] EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountdownService/UpdateData", ReplyAction="http://tempuri.org/ICountdownService/UpdateDataResponse")]
        void UpdateData(string userName, int id, Transfer.SmallTransfer.State state);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICountdownService/UpdateData", ReplyAction="http://tempuri.org/ICountdownService/UpdateDataResponse")]
        System.IAsyncResult BeginUpdateData(string userName, int id, Transfer.SmallTransfer.State state, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountdownService/OnConnectUser", ReplyAction="http://tempuri.org/ICountdownService/OnConnectUserResponse")]
        bool OnConnectUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICountdownService/OnConnectUser", ReplyAction="http://tempuri.org/ICountdownService/OnConnectUserResponse")]
        System.IAsyncResult BeginOnConnectUser(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndOnConnectUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountdownService/OnDisconnectUser", ReplyAction="http://tempuri.org/ICountdownService/OnDisconnectUserResponse")]
        void OnDisconnectUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICountdownService/OnDisconnectUser", ReplyAction="http://tempuri.org/ICountdownService/OnDisconnectUserResponse")]
        System.IAsyncResult BeginOnDisconnectUser(string userName, System.AsyncCallback callback, object asyncState);
        
        void EndOnDisconnectUser(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICountdownServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICountdownService/NotifyAboutRefresh")]
        void NotifyAboutRefresh();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ICountdownService/NotifyAboutRefresh")]
        System.IAsyncResult BeginNotifyAboutRefresh(System.AsyncCallback callback, object asyncState);
        
        void EndNotifyAboutRefresh(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICountdownService/NotifyAboutRefreshReminder")]
        void NotifyAboutRefreshReminder(Transfer.SmallTransfer.ReminderPartDto reminder);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ICountdownService/NotifyAboutRefreshReminder")]
        System.IAsyncResult BeginNotifyAboutRefreshReminder(Transfer.SmallTransfer.ReminderPartDto reminder, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyAboutRefreshReminder(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICountdownServiceChannel : CountdownBusinessLogic.CountdownServiceReference.ICountdownService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Transfer.SmallTransfer.ReminderPartDto[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Transfer.SmallTransfer.ReminderPartDto[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OnConnectUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnConnectUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountdownServiceClient : System.ServiceModel.DuplexClientBase<CountdownBusinessLogic.CountdownServiceReference.ICountdownService>, CountdownBusinessLogic.CountdownServiceReference.ICountdownService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDataDelegate;
        
        private EndOperationDelegate onEndUpdateDataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOnConnectUserDelegate;
        
        private EndOperationDelegate onEndOnConnectUserDelegate;
        
        private System.Threading.SendOrPostCallback onOnConnectUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginOnDisconnectUserDelegate;
        
        private EndOperationDelegate onEndOnDisconnectUserDelegate;
        
        private System.Threading.SendOrPostCallback onOnDisconnectUserCompletedDelegate;
        
        public CountdownServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CountdownServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CountdownServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CountdownServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CountdownServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateDataCompleted;
        
        public event System.EventHandler<OnConnectUserCompletedEventArgs> OnConnectUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OnDisconnectUserCompleted;
        
        public Transfer.SmallTransfer.ReminderPartDto[] GetData(string userName) {
            return base.Channel.GetData(userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Transfer.SmallTransfer.ReminderPartDto[] EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return this.BeginGetData(userName, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            Transfer.SmallTransfer.ReminderPartDto[] retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(string userName) {
            this.GetDataAsync(userName, null);
        }
        
        public void GetDataAsync(string userName, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        userName}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public void UpdateData(string userName, int id, Transfer.SmallTransfer.State state) {
            base.Channel.UpdateData(userName, id, state);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateData(string userName, int id, Transfer.SmallTransfer.State state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateData(userName, id, state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateData(System.IAsyncResult result) {
            base.Channel.EndUpdateData(result);
        }
        
        private System.IAsyncResult OnBeginUpdateData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            Transfer.SmallTransfer.State state = ((Transfer.SmallTransfer.State)(inValues[2]));
            return this.BeginUpdateData(userName, id, state, callback, asyncState);
        }
        
        private object[] OnEndUpdateData(System.IAsyncResult result) {
            this.EndUpdateData(result);
            return null;
        }
        
        private void OnUpdateDataCompleted(object state) {
            if ((this.UpdateDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDataAsync(string userName, int id, Transfer.SmallTransfer.State state) {
            this.UpdateDataAsync(userName, id, state, null);
        }
        
        public void UpdateDataAsync(string userName, int id, Transfer.SmallTransfer.State state, object userState) {
            if ((this.onBeginUpdateDataDelegate == null)) {
                this.onBeginUpdateDataDelegate = new BeginOperationDelegate(this.OnBeginUpdateData);
            }
            if ((this.onEndUpdateDataDelegate == null)) {
                this.onEndUpdateDataDelegate = new EndOperationDelegate(this.OnEndUpdateData);
            }
            if ((this.onUpdateDataCompletedDelegate == null)) {
                this.onUpdateDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDataDelegate, new object[] {
                        userName,
                        id,
                        state}, this.onEndUpdateDataDelegate, this.onUpdateDataCompletedDelegate, userState);
        }
        
        public bool OnConnectUser(string userName, string password) {
            return base.Channel.OnConnectUser(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOnConnectUser(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOnConnectUser(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndOnConnectUser(System.IAsyncResult result) {
            return base.Channel.EndOnConnectUser(result);
        }
        
        private System.IAsyncResult OnBeginOnConnectUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginOnConnectUser(userName, password, callback, asyncState);
        }
        
        private object[] OnEndOnConnectUser(System.IAsyncResult result) {
            bool retVal = this.EndOnConnectUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOnConnectUserCompleted(object state) {
            if ((this.OnConnectUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OnConnectUserCompleted(this, new OnConnectUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OnConnectUserAsync(string userName, string password) {
            this.OnConnectUserAsync(userName, password, null);
        }
        
        public void OnConnectUserAsync(string userName, string password, object userState) {
            if ((this.onBeginOnConnectUserDelegate == null)) {
                this.onBeginOnConnectUserDelegate = new BeginOperationDelegate(this.OnBeginOnConnectUser);
            }
            if ((this.onEndOnConnectUserDelegate == null)) {
                this.onEndOnConnectUserDelegate = new EndOperationDelegate(this.OnEndOnConnectUser);
            }
            if ((this.onOnConnectUserCompletedDelegate == null)) {
                this.onOnConnectUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOnConnectUserCompleted);
            }
            base.InvokeAsync(this.onBeginOnConnectUserDelegate, new object[] {
                        userName,
                        password}, this.onEndOnConnectUserDelegate, this.onOnConnectUserCompletedDelegate, userState);
        }
        
        public void OnDisconnectUser(string userName) {
            base.Channel.OnDisconnectUser(userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOnDisconnectUser(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOnDisconnectUser(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndOnDisconnectUser(System.IAsyncResult result) {
            base.Channel.EndOnDisconnectUser(result);
        }
        
        private System.IAsyncResult OnBeginOnDisconnectUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return this.BeginOnDisconnectUser(userName, callback, asyncState);
        }
        
        private object[] OnEndOnDisconnectUser(System.IAsyncResult result) {
            this.EndOnDisconnectUser(result);
            return null;
        }
        
        private void OnOnDisconnectUserCompleted(object state) {
            if ((this.OnDisconnectUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OnDisconnectUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OnDisconnectUserAsync(string userName) {
            this.OnDisconnectUserAsync(userName, null);
        }
        
        public void OnDisconnectUserAsync(string userName, object userState) {
            if ((this.onBeginOnDisconnectUserDelegate == null)) {
                this.onBeginOnDisconnectUserDelegate = new BeginOperationDelegate(this.OnBeginOnDisconnectUser);
            }
            if ((this.onEndOnDisconnectUserDelegate == null)) {
                this.onEndOnDisconnectUserDelegate = new EndOperationDelegate(this.OnEndOnDisconnectUser);
            }
            if ((this.onOnDisconnectUserCompletedDelegate == null)) {
                this.onOnDisconnectUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOnDisconnectUserCompleted);
            }
            base.InvokeAsync(this.onBeginOnDisconnectUserDelegate, new object[] {
                        userName}, this.onEndOnDisconnectUserDelegate, this.onOnDisconnectUserCompletedDelegate, userState);
        }
    }
}
